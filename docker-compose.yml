#DockerCompose范例
#  1. 请先通过generate-cert.sh生成合适的密钥对
#  2. 更新REGISTRY_AUTH_TOKEN_REALM为docker客户端可访问到本服务的HTTPS地址
#  3. 使用db.sql初始化好数据库，并更新DSN中的数据库信息
#  4. 如果需要，更新Token相关的Issure和Service
#
#备注：
#  第1步中生成的密钥对，本质上用于Registry验证客户端的token是否由UI生成。
#  这种情况下直接使用该密钥对是没有问题的。
#
#  同时，由于Docker建议采用Token Auth认证方式的docker客户端和registry服务器采用HTTPS通信
#  所以这里（为了偷懒）直接将上面的密钥对直接用作HTTPS通信中的证书和私钥。
#  正式环境下请使用由系统信任的CA办法的证书和私钥。
#  或者这里不提供HTTPS密钥对（采用HTTP协议），然后由外部工具（如Nginx）提供HTTPS的反向代理。
version: '2.1'
services:
  registry:
    build: .
    restart: always
    ports:
      - "127.0.0.1:5000:80"
    volumes:
      - "./auth_token.cert:/etc/auth_token.cert:ro"
      - "./auth_token.key:/etc/auth_token.key:ro"
    environment:
      - "REGISTRY_HTTP_RELATIVEURLS=true"
      - "REGISTRY_AUTH_TOKEN_REALM=https://localhost:5000/auth" #配置为客户端能访问到的Auth服务地址，必须是HTTPS
      - "DSN=user:password@tcp(HostIP:Port)/db_name?charset=utf8&parseTime=True&loc=Local"
      - "REGISTRY_AUTH_TOKEN_ISSUER=Issuer"
      - "REGISTRY_AUTH_TOKEN_SERVICE=DockerRegistry"
      - "REGISTRY_AUTH_TOKEN_ROOTKEYBUNDLE=/etc/auth_token.key"
      - "REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/etc/auth_token.cert"
      - "REGISTRY_UI_HTTPS_KEY=/etc/auth_token.key"
      - "REGISTRY_UI_HTTPS_CERT=/etc/auth_token.cert"

